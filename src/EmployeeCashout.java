
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.DocumentEvent;
import java.awt.Color;
import java.sql.Statement;
import javax.swing.JSpinner;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;
import java.awt.Color;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Human
 */
public class EmployeeCashout extends javax.swing.JFrame {

    /**
     * Creates new form EmployeeCashout
     */
    public EmployeeCashout() {
        setUndecorated(true);
        initComponents();
        setFullScreen();
        setLocationRelativeTo(null);
        calculateTotalExpenses();
        disableCashoutBtnUpdate();
        setupSearch();
        
        // Set current date in DateChooser
        fieldDateChooser.setDate(new java.util.Date());

        fieldDateChooser.addPropertyChangeListener("date", new PropertyChangeListener() {
        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            // Check if date was cleared
            if (fieldDateChooser.getDate() == null) {
                loadDataToTable();  // Load all data when date is cleared
            } else {
                loadDataToTable();  // Load filtered data when date is selected
            }
        }
    });
    
    // Initial load of data
    loadDataToTable();
        
        //Customize Table
        // Hide the ID column (assuming it's the first column - index 0)
        TableColumnModel columnModel = tableCashout.getColumnModel();
        TableColumn idColumn = columnModel.getColumn(0);
        idColumn.setMinWidth(0);
        idColumn.setMaxWidth(0);
        idColumn.setPreferredWidth(0);
        idColumn.setResizable(false);
        tableCashout.getTableHeader().setFont(new Font("Times New Roman", Font.BOLD, 15));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCashout = new javax.swing.JTable();
        fieldTotalExpenses = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnLoadAllData = new javax.swing.JButton();
        fieldSearch = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        fieldName = new javax.swing.JTextField();
        fieldAmount = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        btnCashoutUpdate = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnCashoutCancel = new javax.swing.JButton();
        fieldDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel4.setBackground(new java.awt.Color(102, 102, 102));

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));

        tableCashout.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "date", "name", "amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCashout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableCashoutMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableCashout);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Total Expenses");

        btnLoadAllData.setText("Load All Data");
        btnLoadAllData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadAllDataActionPerformed(evt);
            }
        });

        fieldSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldTotalExpenses, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(fieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnLoadAllData, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(94, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnLoadAllData, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addComponent(fieldSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldTotalExpenses, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(90, 90, 90))
        );

        fieldName.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        fieldAmount.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Amount");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("Name");

        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnCashoutUpdate.setText("Update");
        btnCashoutUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCashoutUpdateActionPerformed(evt);
            }
        });
        jPanel6.add(btnCashoutUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 30, 100, 40));

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jPanel6.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 30, 99, 40));

        btnCashoutCancel.setText("Cancel");
        btnCashoutCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCashoutCancelActionPerformed(evt);
            }
        });
        jPanel6.add(btnCashoutCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 30, 90, 40));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(fieldAmount)
                                .addComponent(fieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fieldDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(45, 45, 45))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(fieldDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Eras Bold ITC", 0, 36)); // NOI18N
        jLabel1.setText("Employee Cashout");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66))
        );

        getContentPane().add(jPanel4, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        // Validate input fields
        if (fieldName.getText().trim().isEmpty()) {
            showStatusMessage("Please enter employee name", false);
            return;
        }

        if (fieldAmount.getText().trim().isEmpty()) {
            showStatusMessage("Please enter amount", false);
            return;
        }

        Connection conn = null;
        PreparedStatement pst = null;

        try {
            // Get values from fields
            String name = fieldName.getText().trim();
            int amount;
            try {
                amount = Integer.parseInt(fieldAmount.getText().trim());
            } catch (NumberFormatException e) {
                showStatusMessage("Please enter a valid amount", false);
                return;
            }

            // Get connection
            conn = DBConnection.mycon();

            // Prepare SQL statement
            String insertQuery = "INSERT INTO employee_cashout (date, name, amount) VALUES (?, ?, ?)";
            pst = conn.prepareStatement(insertQuery);

            // Set values in prepared statement
            // Current timestamp in MySQL format
            pst.setTimestamp(1, new java.sql.Timestamp(System.currentTimeMillis()));
            pst.setString(2, name);
            pst.setInt(3, amount);

            // Execute the insert
            int result = pst.executeUpdate();

            if (result > 0) {
                showStatusMessage("Employee Cashout Saved Successfully!", true);
                clearFields();
                loadDataToTable();
                calculateTotalExpenses();
            } else {
                showStatusMessage("Failed to save Employee Cashout", false);
            }

        } catch (SQLException e) {
            showStatusMessage("Database Error: " + e.getMessage(), false);
            e.printStackTrace();
        } finally {
            try {
                if (pst != null) pst.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnLoadAllDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadAllDataActionPerformed
        // TODO add your handling code here:
        fieldDateChooser.setDate(null);
    
        try {
            // Get connection
            Connection conn = DBConnection.mycon();
            DefaultTableModel model = (DefaultTableModel) tableCashout.getModel();

            // Clear existing data in table
            model.setRowCount(0);

            // SQL query to get all data ordered by most recent date
            String query = "SELECT id, DATE_FORMAT(date, '%m/%d/%Y %h:%i %p') AS formatted_date, " +
                          "name, amount FROM employee_cashout ORDER BY date DESC";

            PreparedStatement pst = conn.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            boolean hasRecords = false;

            // Add rows to table model
            while (rs.next()) {
                hasRecords = true;
                Object[] row = {
                    rs.getString("id"),
                    rs.getString("formatted_date"),
                    rs.getString("name"),
                    String.format("₱%,d", rs.getInt("amount"))
                };
                model.addRow(row);
            }

            if (!hasRecords) {
                showStatusMessage("No records found in the database", false);
            }

            // Calculate total
            calculateTotalExpenses();

            // Close resources
            rs.close();
            pst.close();
            conn.close();

        } catch (SQLException e) {
            showStatusMessage("Database error: " + e.getMessage(), false);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnLoadAllDataActionPerformed

    private int selectedId = -1;
    private void tableCashoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCashoutMouseClicked
        // TODO add your handling code here:
        enableCashoutBtnUpdate();
        disableBtnSave();
        if (evt.getClickCount() == 2) {
            int selectedRow = tableCashout.getSelectedRow();

            if (selectedRow != -1) {
                try {
                    // Store the ID from the selected row
                    selectedId = Integer.parseInt(tableCashout.getValueAt(selectedRow, 0).toString());

                    String name = tableCashout.getValueAt(selectedRow, 2).toString();
                    String amount = tableCashout.getValueAt(selectedRow, 3).toString()
                                             .replace("₱", "")
                                             .replace(",", "")
                                             .trim();

                    fieldName.setText(name);
                    fieldAmount.setText(amount);

                } catch (Exception e) {
                    showStatusMessage("Error retrieving row data: " + e.getMessage(), false);
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_tableCashoutMouseClicked

    private void btnCashoutCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCashoutCancelActionPerformed
        // TODO add your handling code here:
        enableBtnSave();
        clearFields();
    }//GEN-LAST:event_btnCashoutCancelActionPerformed

    private void btnCashoutUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCashoutUpdateActionPerformed
        // TODO add your handling code here:
        if (selectedId == -1) {
            showStatusMessage("Please select a record to update by double-clicking a row", false);
            return;
        }

        // Validate input fields
        if (fieldName.getText().trim().isEmpty()) {
            showStatusMessage("Please enter employee name", false);
            return;
        }

        if (fieldAmount.getText().trim().isEmpty()) {
            showStatusMessage("Please enter amount", false);
            return;
        }

        Connection conn = null;
        PreparedStatement pst = null;

        try {
            // Get values from fields
            String name = fieldName.getText().trim();
            int amount;
            try {
                amount = Integer.parseInt(fieldAmount.getText().trim());
            } catch (NumberFormatException e) {
                showStatusMessage("Please enter a valid amount", false);
                return;
            }

            // Get connection
            conn = DBConnection.mycon();

            // Prepare SQL update statement
            String updateQuery = "UPDATE employee_cashout SET name = ?, amount = ? WHERE id = ?";
            pst = conn.prepareStatement(updateQuery);

            // Set values in prepared statement
            pst.setString(1, name);
            pst.setInt(2, amount);
            pst.setInt(3, selectedId);

            // Execute the update
            int result = pst.executeUpdate();

            if (result > 0) {
                showStatusMessage("Record Updated Successfully!", true);

                // Clear fields and reset selectedId
                clearFields();
                selectedId = -1;

                // Reload table data
                loadDataToTable();
            } else {
                showStatusMessage("Failed to update record", false);
            }

        } catch (SQLException e) {
            showStatusMessage("Database Error: " + e.getMessage(), false);
            e.printStackTrace();
        } finally {
            try {
                if (pst != null) pst.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        
    }//GEN-LAST:event_btnCashoutUpdateActionPerformed

    
    private void search() {
        String text = fieldSearch.getText();

        if (text.equals("Search...")) {
            sorter.setRowFilter(null);
        } else {
            try {
                // Create a case-insensitive filter that searches all columns
                RowFilter<DefaultTableModel, Object> filter = new RowFilter<DefaultTableModel, Object>() {
                    @Override
                    public boolean include(Entry<? extends DefaultTableModel, ? extends Object> entry) {
                        for (int i = 0; i < entry.getValueCount(); i++) {
                            if (entry.getStringValue(i).toLowerCase().contains(text.toLowerCase())) {
                                return true;
                            }
                        }
                        return false;
                    }
                };
                sorter.setRowFilter(filter);

                // Recalculate total for filtered rows
                calculateTotalForFilteredRows();

            } catch (Exception e) {
                sorter.setRowFilter(null);
            }
        }
    }

    // Add this method to calculate total for filtered rows
    private void calculateTotalForFilteredRows() {
        int totalAmount = 0;

        // Loop through visible (filtered) rows only
        for (int i = 0; i < tableCashout.getRowCount(); i++) {
            try {
                // Get amount from the table, remove peso sign and commas
                String amountStr = tableCashout.getValueAt(i, 3).toString()
                                          .replace("₱", "")
                                          .replace(",", "")
                                          .trim();

                // Add to total
                totalAmount += Integer.parseInt(amountStr);
            } catch (NumberFormatException e) {
                e.printStackTrace();
            }
        }

        // Format total with peso sign and commas and set to field
        fieldTotalExpenses.setText(String.format("₱%,d", totalAmount));
    }
    
    private TableRowSorter<DefaultTableModel> sorter;

    // Add this in your constructor or initComponents method
    public void setupSearch() {
        // Set up the table sorter
        DefaultTableModel model = (DefaultTableModel) tableCashout.getModel();
        sorter = new TableRowSorter<>(model);
        tableCashout.setRowSorter(sorter);

        // Set up the placeholder
        fieldSearch.setForeground(Color.GRAY);
        fieldSearch.setText("Search...");

        // Add focus listener for placeholder
        fieldSearch.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (fieldSearch.getText().equals("Search...")) {
                    fieldSearch.setText("");
                    fieldSearch.setForeground(Color.BLACK);
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (fieldSearch.getText().isEmpty()) {
                    fieldSearch.setForeground(Color.GRAY);
                    fieldSearch.setText("Search...");
                }
            }
        });

        // Add document listener for real-time search
        fieldSearch.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                search();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                search();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                search();
            }
        });
    }
    private void fieldSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldSearchActionPerformed
        // TODO add your handling code here:
        search();
    }//GEN-LAST:event_fieldSearchActionPerformed
    
    
    
    
    // Helper method to clear fields
    private void clearFields() {
        fieldName.setText("");
        fieldAmount.setText("");
        fieldName.requestFocus();
        selectedId = -1;
    }
    /**
     * @param args the command line arguments
     */
    
    private void setFullScreen() {
        // Get the default screen device
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();

        // Set the window to full-screen mode
        gd.setFullScreenWindow(this);
    }
    
    
    private JLabel statusLabel = null;
    private Timer statusTimer = null;
    private void showStatusMessage(String message, boolean isSuccess) {

        // If there's an existing status message showing, remove it
        if (statusLabel != null && statusLabel.isVisible()) {
            this.remove(statusLabel);
            if (statusTimer != null && statusTimer.isRunning()) {
                statusTimer.stop();
            }
        }

        // Create a new status label
        statusLabel = new JLabel(message);
        statusLabel.setOpaque(true);

        // Style the label based on message type
        if (isSuccess) {
            statusLabel.setBackground(new Color(46, 204, 113)); // Green
        } else {
            statusLabel.setBackground(new Color(231, 76, 60)); // Red
        }

        statusLabel.setForeground(Color.WHITE);
        statusLabel.setFont(new Font("Arial", Font.BOLD, 16));
        statusLabel.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));

        // Add a subtle shadow effect for better visibility
        statusLabel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(0, 0, 0, 50), 1),
            BorderFactory.createEmptyBorder(10, 20, 10, 20)
        ));

        // Calculate position (centered at the top)
        Dimension labelSize = statusLabel.getPreferredSize();
        int x = (this.getWidth() - labelSize.width) / 2;
        int y = 20; // Top padding

        // Set label position and size
        statusLabel.setBounds(x, y, labelSize.width, labelSize.height);

        // Add label to dashboard (assuming this is the JFrame)
        this.setLayout(null); // Ensure absolute positioning works
        this.add(statusLabel);
        statusLabel.setVisible(true);

        // Bring to front (in case it's behind other components)
        statusLabel.getParent().setComponentZOrder(statusLabel, 0);

        // Repaint to show the label immediately
        this.repaint();

        // Create timer to hide the label after 3 seconds
        statusTimer = new Timer(3000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                fadeOutStatusLabel();
            }
        });

        statusTimer.setRepeats(false);
        statusTimer.start();
    }

    /**
     * Gradually fades out the status label for a smooth disappearing effect
     */
    private void fadeOutStatusLabel() {
        if (statusLabel == null || !statusLabel.isVisible()) {
            return;
        }

        final Timer fadeTimer = new Timer(50, null);
        final float[] alpha = {1.0f};

        fadeTimer.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                alpha[0] -= 0.05f;
                if (alpha[0] <= 0) {
                    fadeTimer.stop();
                    statusLabel.setVisible(false);
                    EmployeeCashout.this.remove(statusLabel);
                    EmployeeCashout.this.repaint();
                } else {
                    Color bg = statusLabel.getBackground();
                    statusLabel.setBackground(new Color(
                        bg.getRed(), bg.getGreen(), bg.getBlue(), 
                        Math.max(0, Math.min(255, (int)(alpha[0] * 255)))
                    ));
                    EmployeeCashout.this.repaint();
                }
            }
        });

        fadeTimer.start();
    }
    
    private void loadDataToTable() {
        try {
            Connection conn = DBConnection.mycon();
            DefaultTableModel model = (DefaultTableModel) tableCashout.getModel();
            model.setRowCount(0);

            // Get selected date from DateChooser
            java.util.Date selectedDate = fieldDateChooser.getDate();
            String query;
            PreparedStatement pst;

            if (selectedDate != null) {
                // Convert selected date to SQL date format and filter by that date
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String dateStr = sdf.format(selectedDate);

                query = "SELECT id, DATE_FORMAT(date, '%m/%d/%Y %h:%i %p') AS formatted_date, " +
                       "name, amount FROM employee_cashout " +
                       "WHERE DATE(date) = ? " +
                       "ORDER BY date DESC";

                pst = conn.prepareStatement(query);
                pst.setString(1, dateStr);
            } else {
                // If no date selected, show all records
                query = "SELECT id, DATE_FORMAT(date, '%m/%d/%Y %h:%i %p') AS formatted_date, " +
                       "name, amount FROM employee_cashout " +
                       "ORDER BY date DESC";

                pst = conn.prepareStatement(query);
            }

            ResultSet rs = pst.executeQuery();
            boolean hasRecords = false;

            while (rs.next()) {
                hasRecords = true;
                Object[] row = {
                    rs.getString("id"),
                    rs.getString("formatted_date"),
                    rs.getString("name"),
                    String.format("₱ %,d", rs.getInt("amount"))
                };
                model.addRow(row);
            }

            if (!hasRecords) {
                if (selectedDate != null) {
                    showStatusMessage("No records found for the selected date", false);
                } else {
                    showStatusMessage("No records found in the database", false);
                }
            }

            // Calculate total expenses for filtered data
            calculateTotalExpenses();

            rs.close();
            pst.close();
            conn.close();

        } catch (SQLException e) {
            showStatusMessage("Database error: " + e.getMessage(), false);
            e.printStackTrace();
        }
    }
    
    private void calculateTotalExpenses() {
        int totalAmount = 0;
        DefaultTableModel model = (DefaultTableModel) tableCashout.getModel();

        // Loop through all rows in the table
        for (int i = 0; i < model.getRowCount(); i++) {
            try {
                // Get amount from the table, remove peso sign and commas
                String amountStr = model.getValueAt(i, 3).toString()
                                      .replace("₱", "")
                                      .replace(",", "")
                                      .trim();
                
                // Add to total
                totalAmount += Integer.parseInt(amountStr);
            } catch (NumberFormatException e) {
                e.printStackTrace();
            }
        }

        // Format total with peso sign and commas and set to field
        fieldTotalExpenses.setText(String.format("₱%,d", totalAmount));
    }
    
    //Hide buttons in Items
    private void disableBtnSave(){
        btnSave.setVisible(false);
    
    }
    private void disableCashoutBtnUpdate(){
        btnCashoutUpdate.setVisible(false);
        btnCashoutCancel.setVisible(false);
    
    }
    private void enableBtnSave(){
        btnSave.setVisible(true);
        btnCashoutUpdate.setVisible(false);
        btnCashoutCancel.setVisible(false);
    
    }
    private void enableCashoutBtnUpdate(){
        btnCashoutUpdate.setVisible(true);
        btnCashoutCancel.setVisible(true);
    
    }
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeCashout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeCashout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeCashout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeCashout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeeCashout().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCashoutCancel;
    private javax.swing.JButton btnCashoutUpdate;
    private javax.swing.JButton btnLoadAllData;
    private javax.swing.JButton btnSave;
    private javax.swing.JTextField fieldAmount;
    private com.toedter.calendar.JDateChooser fieldDateChooser;
    private javax.swing.JTextField fieldName;
    private javax.swing.JTextField fieldSearch;
    private javax.swing.JTextField fieldTotalExpenses;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableCashout;
    // End of variables declaration//GEN-END:variables
}
